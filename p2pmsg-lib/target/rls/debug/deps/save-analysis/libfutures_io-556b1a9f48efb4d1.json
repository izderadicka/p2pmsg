{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1","program":"/home/ivan/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","futures_io","--edition=2018","/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"std\"","-C","metadata=556b1a9f48efb4d1","-C","extra-filename=-556b1a9f48efb4d1","--out-dir","/home/ivan/workspace/p2pmsg/p2pmsg-lib/target/rls/debug/deps","-L","dependency=/home/ivan/workspace/p2pmsg/p2pmsg-lib/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/ivan/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/ivan/workspace/p2pmsg/p2pmsg-lib/target/rls/debug/deps/libfutures_io-556b1a9f48efb4d1.rmeta"},"prelude":{"crate_id":{"name":"futures_io","disambiguator":[12091782109879691138,2581324228382407792]},"crate_root":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src","external_crates":[{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[7827686636389194820,15662552692549508232]}},{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[8347428267238659886,10332094417061409504]}},{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[1363863465332800457,13848166988694336684]}},{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[12137614861726203495,15548133240156816566]}},{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[18056567842020430853,9313265962764064672]}},{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[17764581655047699045,8969240834890926963]}},{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[15105272547384731958,12075926336353145446]}},{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[18440455352970948901,15112185841299963639]}},{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[1364483041201605089,13268241566818872575]}},{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14006621007583817116,4233624759020785085]}},{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[8672076995780005164,5844773395501633050]}},{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[7980643601488589141,11238545750628155236]}},{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[812282429613043422,12768483485645190371]}},{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[16394268894339983760,18168038129299562657]}}],"span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":0,"byte_end":21578,"line_start":1,"line_end":562,"column_start":1,"column_end":25}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":5130,"byte_end":5131,"line_start":119,"line_end":119,"column_start":41,"column_end":42},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":0,"byte_end":21578,"line_start":1,"line_end":562,"column_start":1,"column_end":25},"name":"","qualname":"::","value":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":73}],"decl_id":null,"docs":" Asynchronous I/O","sig":null,"attributes":[{"value":"! Asynchronous I/O","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":0,"byte_end":20,"line_start":1,"line_end":1,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":21,"byte_end":24,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This crate contains the `AsyncRead`, `AsyncWrite`, `AsyncSeek`, and","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":25,"byte_end":96,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"! `AsyncBufRead` traits, the asynchronous analogs to","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":97,"byte_end":151,"line_start":4,"line_end":4,"column_start":1,"column_end":55}},{"value":"! `std::io::{Read, Write, Seek, BufRead}`. The primary difference is","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":152,"byte_end":222,"line_start":5,"line_end":5,"column_start":1,"column_end":71}},{"value":"! that these traits integrate with the asynchronous task system.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":223,"byte_end":289,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"!","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":290,"byte_end":293,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! All items of this library are only available when the `std` feature of this","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":294,"byte_end":373,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"! library is activated, and it is activated by default.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":374,"byte_end":431,"line_start":9,"line_end":9,"column_start":1,"column_end":58}},{"value":"warn(missing_docs, missing_debug_implementations, rust_2018_idioms,\n       unreachable_pub)","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":548,"byte_end":636,"line_start":15,"line_end":15,"column_start":1,"column_end":89}},{"value":"warn(clippy :: all)","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":804,"byte_end":825,"line_start":18,"line_end":18,"column_start":1,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":17},"span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":2301,"byte_end":2310,"line_start":57,"line_end":57,"column_start":15,"column_end":24},"name":"AsyncRead","qualname":"::if_std::AsyncRead","value":"AsyncRead","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":19}],"decl_id":null,"docs":" Read bytes asynchronously.","sig":null,"attributes":[{"value":"/ Read bytes asynchronously.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":1909,"byte_end":1939,"line_start":50,"line_end":50,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":1944,"byte_end":1947,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ This trait is analogous to the `std::io::Read` trait, but integrates","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":1952,"byte_end":2024,"line_start":52,"line_end":52,"column_start":5,"column_end":77}},{"value":"/ with the asynchronous task system. In particular, the `poll_read`","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":2029,"byte_end":2098,"line_start":53,"line_end":53,"column_start":5,"column_end":74}},{"value":"/ method, unlike `Read::read`, will automatically queue the current task","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":2103,"byte_end":2177,"line_start":54,"line_end":54,"column_start":5,"column_end":79}},{"value":"/ for wakeup and return if data is not yet available, rather than blocking","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":2182,"byte_end":2258,"line_start":55,"line_end":55,"column_start":5,"column_end":81}},{"value":"/ the calling thread.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":2263,"byte_end":2286,"line_start":56,"line_end":56,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":3671,"byte_end":3680,"line_start":90,"line_end":90,"column_start":12,"column_end":21},"name":"poll_read","qualname":"::if_std::AsyncRead::poll_read","value":"fn (self: Pin<&mut Self>, cx: &mut Context<'_>, buf: &mut [u8]) -> Poll<Result<usize>>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Attempt to read from the `AsyncRead` into `buf`.","sig":null,"attributes":[{"value":"/ Attempt to read from the `AsyncRead` into `buf`.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":2938,"byte_end":2990,"line_start":75,"line_end":75,"column_start":9,"column_end":61}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":2999,"byte_end":3002,"line_start":76,"line_end":76,"column_start":9,"column_end":12}},{"value":"/ On success, returns `Poll::Ready(Ok(num_bytes_read))`.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":3011,"byte_end":3069,"line_start":77,"line_end":77,"column_start":9,"column_end":67}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":3078,"byte_end":3081,"line_start":78,"line_end":78,"column_start":9,"column_end":12}},{"value":"/ If no data is available for reading, the method returns","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":3090,"byte_end":3149,"line_start":79,"line_end":79,"column_start":9,"column_end":68}},{"value":"/ `Poll::Pending` and arranges for the current task (via","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":3158,"byte_end":3216,"line_start":80,"line_end":80,"column_start":9,"column_end":67}},{"value":"/ `cx.waker().wake_by_ref()`) to receive a notification when the object becomes","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":3225,"byte_end":3306,"line_start":81,"line_end":81,"column_start":9,"column_end":90}},{"value":"/ readable or is closed.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":3315,"byte_end":3341,"line_start":82,"line_end":82,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":3350,"byte_end":3353,"line_start":83,"line_end":83,"column_start":9,"column_end":12}},{"value":"/ # Implementation","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":3362,"byte_end":3382,"line_start":84,"line_end":84,"column_start":9,"column_end":29}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":3391,"byte_end":3394,"line_start":85,"line_end":85,"column_start":9,"column_end":12}},{"value":"/ This function may not return errors of kind `WouldBlock` or","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":3403,"byte_end":3466,"line_start":86,"line_end":86,"column_start":9,"column_end":72}},{"value":"/ `Interrupted`.  Implementations must convert `WouldBlock` into","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":3475,"byte_end":3541,"line_start":87,"line_end":87,"column_start":9,"column_end":75}},{"value":"/ `Poll::Pending` and either internally retry or convert","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":3550,"byte_end":3608,"line_start":88,"line_end":88,"column_start":9,"column_end":67}},{"value":"/ `Interrupted` into another error kind.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":3617,"byte_end":3659,"line_start":89,"line_end":89,"column_start":9,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":4896,"byte_end":4914,"line_start":115,"line_end":115,"column_start":12,"column_end":30},"name":"poll_read_vectored","qualname":"::if_std::AsyncRead::poll_read_vectored","value":"fn (self: Pin<&mut Self>, cx: &mut Context<'_>, bufs: &mut [IoSliceMut<'_>]) -> Poll<Result<usize>>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Attempt to read from the `AsyncRead` into `bufs` using vectored\n IO operations.","sig":null,"attributes":[{"value":"/ Attempt to read from the `AsyncRead` into `bufs` using vectored","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":3786,"byte_end":3853,"line_start":93,"line_end":93,"column_start":9,"column_end":76}},{"value":"/ IO operations.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":3862,"byte_end":3880,"line_start":94,"line_end":94,"column_start":9,"column_end":27}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":3889,"byte_end":3892,"line_start":95,"line_end":95,"column_start":9,"column_end":12}},{"value":"/ This method is similar to `poll_read`, but allows data to be read","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":3901,"byte_end":3970,"line_start":96,"line_end":96,"column_start":9,"column_end":78}},{"value":"/ into multiple buffers using a single operation.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":3979,"byte_end":4030,"line_start":97,"line_end":97,"column_start":9,"column_end":60}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":4039,"byte_end":4042,"line_start":98,"line_end":98,"column_start":9,"column_end":12}},{"value":"/ On success, returns `Poll::Ready(Ok(num_bytes_read))`.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":4051,"byte_end":4109,"line_start":99,"line_end":99,"column_start":9,"column_end":67}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":4118,"byte_end":4121,"line_start":100,"line_end":100,"column_start":9,"column_end":12}},{"value":"/ If no data is available for reading, the method returns","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":4130,"byte_end":4189,"line_start":101,"line_end":101,"column_start":9,"column_end":68}},{"value":"/ `Poll::Pending` and arranges for the current task (via","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":4198,"byte_end":4256,"line_start":102,"line_end":102,"column_start":9,"column_end":67}},{"value":"/ `cx.waker().wake_by_ref()`) to receive a notification when the object becomes","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":4265,"byte_end":4346,"line_start":103,"line_end":103,"column_start":9,"column_end":90}},{"value":"/ readable or is closed.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":4355,"byte_end":4381,"line_start":104,"line_end":104,"column_start":9,"column_end":35}},{"value":"/ By default, this method delegates to using `poll_read` on the first","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":4390,"byte_end":4461,"line_start":105,"line_end":105,"column_start":9,"column_end":80}},{"value":"/ buffer in `bufs`. Objects which support vectored IO should override","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":4470,"byte_end":4541,"line_start":106,"line_end":106,"column_start":9,"column_end":80}},{"value":"/ this method.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":4550,"byte_end":4566,"line_start":107,"line_end":107,"column_start":9,"column_end":25}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":4575,"byte_end":4578,"line_start":108,"line_end":108,"column_start":9,"column_end":12}},{"value":"/ # Implementation","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":4587,"byte_end":4607,"line_start":109,"line_end":109,"column_start":9,"column_end":29}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":4616,"byte_end":4619,"line_start":110,"line_end":110,"column_start":9,"column_end":12}},{"value":"/ This function may not return errors of kind `WouldBlock` or","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":4628,"byte_end":4691,"line_start":111,"line_end":111,"column_start":9,"column_end":72}},{"value":"/ `Interrupted`.  Implementations must convert `WouldBlock` into","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":4700,"byte_end":4766,"line_start":112,"line_end":112,"column_start":9,"column_end":75}},{"value":"/ `Poll::Pending` and either internally retry or convert","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":4775,"byte_end":4833,"line_start":113,"line_end":113,"column_start":9,"column_end":67}},{"value":"/ `Interrupted` into another error kind.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":4842,"byte_end":4884,"line_start":114,"line_end":114,"column_start":9,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":20},"span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":5669,"byte_end":5679,"line_start":134,"line_end":134,"column_start":15,"column_end":25},"name":"AsyncWrite","qualname":"::if_std::AsyncWrite","value":"AsyncWrite","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24}],"decl_id":null,"docs":" Write bytes asynchronously.","sig":null,"attributes":[{"value":"/ Write bytes asynchronously.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":5272,"byte_end":5303,"line_start":127,"line_end":127,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":5308,"byte_end":5311,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ This trait is analogous to the `std::io::Write` trait, but integrates","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":5316,"byte_end":5389,"line_start":129,"line_end":129,"column_start":5,"column_end":78}},{"value":"/ with the asynchronous task system. In particular, the `poll_write`","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":5394,"byte_end":5464,"line_start":130,"line_end":130,"column_start":5,"column_end":75}},{"value":"/ method, unlike `Write::write`, will automatically queue the current task","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":5469,"byte_end":5545,"line_start":131,"line_end":131,"column_start":5,"column_end":81}},{"value":"/ for wakeup and return if data is not yet available, rather than blocking","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":5550,"byte_end":5626,"line_start":132,"line_end":132,"column_start":5,"column_end":81}},{"value":"/ the calling thread.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":5631,"byte_end":5654,"line_start":133,"line_end":133,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":6431,"byte_end":6441,"line_start":150,"line_end":150,"column_start":12,"column_end":22},"name":"poll_write","qualname":"::if_std::AsyncWrite::poll_write","value":"fn (self: Pin<&mut Self>, cx: &mut Context<'_>, buf: &[u8]) -> Poll<Result<usize>>","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" Attempt to write bytes from `buf` into the object.","sig":null,"attributes":[{"value":"/ Attempt to write bytes from `buf` into the object.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":5690,"byte_end":5744,"line_start":135,"line_end":135,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":5753,"byte_end":5756,"line_start":136,"line_end":136,"column_start":9,"column_end":12}},{"value":"/ On success, returns `Poll::Ready(Ok(num_bytes_written))`.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":5765,"byte_end":5826,"line_start":137,"line_end":137,"column_start":9,"column_end":70}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":5835,"byte_end":5838,"line_start":138,"line_end":138,"column_start":9,"column_end":12}},{"value":"/ If the object is not ready for writing, the method returns","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":5847,"byte_end":5909,"line_start":139,"line_end":139,"column_start":9,"column_end":71}},{"value":"/ `Poll::Pending` and arranges for the current task (via","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":5918,"byte_end":5976,"line_start":140,"line_end":140,"column_start":9,"column_end":67}},{"value":"/ `cx.waker().wake_by_ref()`) to receive a notification when the object becomes","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":5985,"byte_end":6066,"line_start":141,"line_end":141,"column_start":9,"column_end":90}},{"value":"/ writable or is closed.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":6075,"byte_end":6101,"line_start":142,"line_end":142,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":6110,"byte_end":6113,"line_start":143,"line_end":143,"column_start":9,"column_end":12}},{"value":"/ # Implementation","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":6122,"byte_end":6142,"line_start":144,"line_end":144,"column_start":9,"column_end":29}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":6151,"byte_end":6154,"line_start":145,"line_end":145,"column_start":9,"column_end":12}},{"value":"/ This function may not return errors of kind `WouldBlock` or","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":6163,"byte_end":6226,"line_start":146,"line_end":146,"column_start":9,"column_end":72}},{"value":"/ `Interrupted`.  Implementations must convert `WouldBlock` into","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":6235,"byte_end":6301,"line_start":147,"line_end":147,"column_start":9,"column_end":75}},{"value":"/ `Poll::Pending` and either internally retry or convert","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":6310,"byte_end":6368,"line_start":148,"line_end":148,"column_start":9,"column_end":67}},{"value":"/ `Interrupted` into another error kind.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":6377,"byte_end":6419,"line_start":149,"line_end":149,"column_start":9,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":7678,"byte_end":7697,"line_start":176,"line_end":176,"column_start":12,"column_end":31},"name":"poll_write_vectored","qualname":"::if_std::AsyncWrite::poll_write_vectored","value":"fn (self: Pin<&mut Self>, cx: &mut Context<'_>, bufs: &[IoSlice<'_>]) -> Poll<Result<usize>>","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" Attempt to write bytes from `bufs` into the object using vectored\n IO operations.","sig":null,"attributes":[{"value":"/ Attempt to write bytes from `bufs` into the object using vectored","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":6543,"byte_end":6612,"line_start":153,"line_end":153,"column_start":9,"column_end":78}},{"value":"/ IO operations.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":6621,"byte_end":6639,"line_start":154,"line_end":154,"column_start":9,"column_end":27}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":6648,"byte_end":6651,"line_start":155,"line_end":155,"column_start":9,"column_end":12}},{"value":"/ This method is similar to `poll_write`, but allows data from multiple buffers to be written","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":6660,"byte_end":6755,"line_start":156,"line_end":156,"column_start":9,"column_end":104}},{"value":"/ using a single operation.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":6764,"byte_end":6793,"line_start":157,"line_end":157,"column_start":9,"column_end":38}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":6802,"byte_end":6805,"line_start":158,"line_end":158,"column_start":9,"column_end":12}},{"value":"/ On success, returns `Poll::Ready(Ok(num_bytes_written))`.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":6814,"byte_end":6875,"line_start":159,"line_end":159,"column_start":9,"column_end":70}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":6884,"byte_end":6887,"line_start":160,"line_end":160,"column_start":9,"column_end":12}},{"value":"/ If the object is not ready for writing, the method returns","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":6896,"byte_end":6958,"line_start":161,"line_end":161,"column_start":9,"column_end":71}},{"value":"/ `Poll::Pending` and arranges for the current task (via","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":6967,"byte_end":7025,"line_start":162,"line_end":162,"column_start":9,"column_end":67}},{"value":"/ `cx.waker().wake_by_ref()`) to receive a notification when the object becomes","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":7034,"byte_end":7115,"line_start":163,"line_end":163,"column_start":9,"column_end":90}},{"value":"/ writable or is closed.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":7124,"byte_end":7150,"line_start":164,"line_end":164,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":7159,"byte_end":7162,"line_start":165,"line_end":165,"column_start":9,"column_end":12}},{"value":"/ By default, this method delegates to using `poll_write` on the first","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":7171,"byte_end":7243,"line_start":166,"line_end":166,"column_start":9,"column_end":81}},{"value":"/ buffer in `bufs`. Objects which support vectored IO should override","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":7252,"byte_end":7323,"line_start":167,"line_end":167,"column_start":9,"column_end":80}},{"value":"/ this method.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":7332,"byte_end":7348,"line_start":168,"line_end":168,"column_start":9,"column_end":25}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":7357,"byte_end":7360,"line_start":169,"line_end":169,"column_start":9,"column_end":12}},{"value":"/ # Implementation","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":7369,"byte_end":7389,"line_start":170,"line_end":170,"column_start":9,"column_end":29}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":7398,"byte_end":7401,"line_start":171,"line_end":171,"column_start":9,"column_end":12}},{"value":"/ This function may not return errors of kind `WouldBlock` or","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":7410,"byte_end":7473,"line_start":172,"line_end":172,"column_start":9,"column_end":72}},{"value":"/ `Interrupted`.  Implementations must convert `WouldBlock` into","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":7482,"byte_end":7548,"line_start":173,"line_end":173,"column_start":9,"column_end":75}},{"value":"/ `Poll::Pending` and either internally retry or convert","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":7557,"byte_end":7615,"line_start":174,"line_end":174,"column_start":9,"column_end":67}},{"value":"/ `Interrupted` into another error kind.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":7624,"byte_end":7666,"line_start":175,"line_end":175,"column_start":9,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":8819,"byte_end":8829,"line_start":203,"line_end":203,"column_start":12,"column_end":22},"name":"poll_flush","qualname":"::if_std::AsyncWrite::poll_flush","value":"fn (self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<()>>","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" Attempt to flush the object, ensuring that any buffered data reach\n their destination.","sig":null,"attributes":[{"value":"/ Attempt to flush the object, ensuring that any buffered data reach","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":8039,"byte_end":8109,"line_start":187,"line_end":187,"column_start":9,"column_end":79}},{"value":"/ their destination.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":8118,"byte_end":8140,"line_start":188,"line_end":188,"column_start":9,"column_end":31}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":8149,"byte_end":8152,"line_start":189,"line_end":189,"column_start":9,"column_end":12}},{"value":"/ On success, returns `Poll::Ready(Ok(()))`.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":8161,"byte_end":8207,"line_start":190,"line_end":190,"column_start":9,"column_end":55}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":8216,"byte_end":8219,"line_start":191,"line_end":191,"column_start":9,"column_end":12}},{"value":"/ If flushing cannot immediately complete, this method returns","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":8228,"byte_end":8292,"line_start":192,"line_end":192,"column_start":9,"column_end":73}},{"value":"/ `Poll::Pending` and arranges for the current task (via","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":8301,"byte_end":8359,"line_start":193,"line_end":193,"column_start":9,"column_end":67}},{"value":"/ `cx.waker().wake_by_ref()`) to receive a notification when the object can make","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":8368,"byte_end":8450,"line_start":194,"line_end":194,"column_start":9,"column_end":91}},{"value":"/ progress towards flushing.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":8459,"byte_end":8489,"line_start":195,"line_end":195,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":8498,"byte_end":8501,"line_start":196,"line_end":196,"column_start":9,"column_end":12}},{"value":"/ # Implementation","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":8510,"byte_end":8530,"line_start":197,"line_end":197,"column_start":9,"column_end":29}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":8539,"byte_end":8542,"line_start":198,"line_end":198,"column_start":9,"column_end":12}},{"value":"/ This function may not return errors of kind `WouldBlock` or","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":8551,"byte_end":8614,"line_start":199,"line_end":199,"column_start":9,"column_end":72}},{"value":"/ `Interrupted`.  Implementations must convert `WouldBlock` into","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":8623,"byte_end":8689,"line_start":200,"line_end":200,"column_start":9,"column_end":75}},{"value":"/ `Poll::Pending` and either internally retry or convert","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":8698,"byte_end":8756,"line_start":201,"line_end":201,"column_start":9,"column_end":67}},{"value":"/ `Interrupted` into another error kind.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":8765,"byte_end":8807,"line_start":202,"line_end":202,"column_start":9,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":9615,"byte_end":9625,"line_start":220,"line_end":220,"column_start":12,"column_end":22},"name":"poll_close","qualname":"::if_std::AsyncWrite::poll_close","value":"fn (self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<()>>","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" Attempt to close the object.","sig":null,"attributes":[{"value":"/ Attempt to close the object.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":8904,"byte_end":8936,"line_start":205,"line_end":205,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":8945,"byte_end":8948,"line_start":206,"line_end":206,"column_start":9,"column_end":12}},{"value":"/ On success, returns `Poll::Ready(Ok(()))`.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":8957,"byte_end":9003,"line_start":207,"line_end":207,"column_start":9,"column_end":55}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":9012,"byte_end":9015,"line_start":208,"line_end":208,"column_start":9,"column_end":12}},{"value":"/ If closing cannot immediately complete, this function returns","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":9024,"byte_end":9089,"line_start":209,"line_end":209,"column_start":9,"column_end":74}},{"value":"/ `Poll::Pending` and arranges for the current task (via","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":9098,"byte_end":9156,"line_start":210,"line_end":210,"column_start":9,"column_end":67}},{"value":"/ `cx.waker().wake_by_ref()`) to receive a notification when the object can make","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":9165,"byte_end":9247,"line_start":211,"line_end":211,"column_start":9,"column_end":91}},{"value":"/ progress towards closing.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":9256,"byte_end":9285,"line_start":212,"line_end":212,"column_start":9,"column_end":38}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":9294,"byte_end":9297,"line_start":213,"line_end":213,"column_start":9,"column_end":12}},{"value":"/ # Implementation","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":9306,"byte_end":9326,"line_start":214,"line_end":214,"column_start":9,"column_end":29}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":9335,"byte_end":9338,"line_start":215,"line_end":215,"column_start":9,"column_end":12}},{"value":"/ This function may not return errors of kind `WouldBlock` or","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":9347,"byte_end":9410,"line_start":216,"line_end":216,"column_start":9,"column_end":72}},{"value":"/ `Interrupted`.  Implementations must convert `WouldBlock` into","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":9419,"byte_end":9485,"line_start":217,"line_end":217,"column_start":9,"column_end":75}},{"value":"/ `Poll::Pending` and either internally retry or convert","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":9494,"byte_end":9552,"line_start":218,"line_end":218,"column_start":9,"column_end":67}},{"value":"/ `Interrupted` into another error kind.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":9561,"byte_end":9603,"line_start":219,"line_end":219,"column_start":9,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":25},"span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":10094,"byte_end":10103,"line_start":230,"line_end":230,"column_start":15,"column_end":24},"name":"AsyncSeek","qualname":"::if_std::AsyncSeek","value":"AsyncSeek","parent":null,"children":[{"krate":0,"index":26}],"decl_id":null,"docs":" Seek bytes asynchronously.","sig":null,"attributes":[{"value":"/ Seek bytes asynchronously.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":9702,"byte_end":9732,"line_start":223,"line_end":223,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":9737,"byte_end":9740,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ This trait is analogous to the `std::io::Seek` trait, but integrates","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":9745,"byte_end":9817,"line_start":225,"line_end":225,"column_start":5,"column_end":77}},{"value":"/ with the asynchronous task system. In particular, the `poll_seek`","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":9822,"byte_end":9891,"line_start":226,"line_end":226,"column_start":5,"column_end":74}},{"value":"/ method, unlike `Seek::seek`, will automatically queue the current task","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":9896,"byte_end":9970,"line_start":227,"line_end":227,"column_start":5,"column_end":79}},{"value":"/ for wakeup and return if data is not yet available, rather than blocking","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":9975,"byte_end":10051,"line_start":228,"line_end":228,"column_start":5,"column_end":81}},{"value":"/ the calling thread.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":10056,"byte_end":10079,"line_start":229,"line_end":229,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":10958,"byte_end":10967,"line_start":250,"line_end":250,"column_start":12,"column_end":21},"name":"poll_seek","qualname":"::if_std::AsyncSeek::poll_seek","value":"fn (self: Pin<&mut Self>, cx: &mut Context<'_>, pos: SeekFrom) -> Poll<Result<u64>>","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Attempt to seek to an offset, in bytes, in a stream.","sig":null,"attributes":[{"value":"/ Attempt to seek to an offset, in bytes, in a stream.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":10114,"byte_end":10170,"line_start":231,"line_end":231,"column_start":9,"column_end":65}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":10179,"byte_end":10182,"line_start":232,"line_end":232,"column_start":9,"column_end":12}},{"value":"/ A seek beyond the end of a stream is allowed, but behavior is defined","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":10191,"byte_end":10264,"line_start":233,"line_end":233,"column_start":9,"column_end":82}},{"value":"/ by the implementation.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":10273,"byte_end":10299,"line_start":234,"line_end":234,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":10308,"byte_end":10311,"line_start":235,"line_end":235,"column_start":9,"column_end":12}},{"value":"/ If the seek operation completed successfully,","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":10320,"byte_end":10369,"line_start":236,"line_end":236,"column_start":9,"column_end":58}},{"value":"/ this method returns the new position from the start of the stream.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":10378,"byte_end":10448,"line_start":237,"line_end":237,"column_start":9,"column_end":79}},{"value":"/ That position can be used later with [`SeekFrom::Start`].","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":10457,"byte_end":10518,"line_start":238,"line_end":238,"column_start":9,"column_end":70}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":10527,"byte_end":10530,"line_start":239,"line_end":239,"column_start":9,"column_end":12}},{"value":"/ # Errors","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":10539,"byte_end":10551,"line_start":240,"line_end":240,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":10560,"byte_end":10563,"line_start":241,"line_end":241,"column_start":9,"column_end":12}},{"value":"/ Seeking to a negative offset is considered an error.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":10572,"byte_end":10628,"line_start":242,"line_end":242,"column_start":9,"column_end":65}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":10637,"byte_end":10640,"line_start":243,"line_end":243,"column_start":9,"column_end":12}},{"value":"/ # Implementation","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":10649,"byte_end":10669,"line_start":244,"line_end":244,"column_start":9,"column_end":29}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":10678,"byte_end":10681,"line_start":245,"line_end":245,"column_start":9,"column_end":12}},{"value":"/ This function may not return errors of kind `WouldBlock` or","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":10690,"byte_end":10753,"line_start":246,"line_end":246,"column_start":9,"column_end":72}},{"value":"/ `Interrupted`.  Implementations must convert `WouldBlock` into","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":10762,"byte_end":10828,"line_start":247,"line_end":247,"column_start":9,"column_end":75}},{"value":"/ `Poll::Pending` and either internally retry or convert","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":10837,"byte_end":10895,"line_start":248,"line_end":248,"column_start":9,"column_end":67}},{"value":"/ `Interrupted` into another error kind.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":10904,"byte_end":10946,"line_start":249,"line_end":249,"column_start":9,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":27},"span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":11478,"byte_end":11490,"line_start":261,"line_end":261,"column_start":15,"column_end":27},"name":"AsyncBufRead","qualname":"::if_std::AsyncBufRead","value":"AsyncBufRead: AsyncRead","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29}],"decl_id":null,"docs":" Read bytes asynchronously.","sig":null,"attributes":[{"value":"/ Read bytes asynchronously.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":11072,"byte_end":11102,"line_start":254,"line_end":254,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":11107,"byte_end":11110,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ This trait is analogous to the `std::io::BufRead` trait, but integrates","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":11115,"byte_end":11190,"line_start":256,"line_end":256,"column_start":5,"column_end":80}},{"value":"/ with the asynchronous task system. In particular, the `poll_fill_buf`","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":11195,"byte_end":11268,"line_start":257,"line_end":257,"column_start":5,"column_end":78}},{"value":"/ method, unlike `BufRead::fill_buf`, will automatically queue the current task","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":11273,"byte_end":11354,"line_start":258,"line_end":258,"column_start":5,"column_end":86}},{"value":"/ for wakeup and return if data is not yet available, rather than blocking","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":11359,"byte_end":11435,"line_start":259,"line_end":259,"column_start":5,"column_end":81}},{"value":"/ the calling thread.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":11440,"byte_end":11463,"line_start":260,"line_end":260,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":12993,"byte_end":13006,"line_start":290,"line_end":290,"column_start":12,"column_end":25},"name":"poll_fill_buf","qualname":"::if_std::AsyncBufRead::poll_fill_buf","value":"fn (self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<&[u8]>>","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Attempt to return the contents of the internal buffer, filling it with more data\n from the inner reader if it is empty.","sig":null,"attributes":[{"value":"/ Attempt to return the contents of the internal buffer, filling it with more data","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":11512,"byte_end":11596,"line_start":262,"line_end":262,"column_start":9,"column_end":93}},{"value":"/ from the inner reader if it is empty.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":11605,"byte_end":11646,"line_start":263,"line_end":263,"column_start":9,"column_end":50}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":11655,"byte_end":11658,"line_start":264,"line_end":264,"column_start":9,"column_end":12}},{"value":"/ On success, returns `Poll::Ready(Ok(buf))`.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":11667,"byte_end":11714,"line_start":265,"line_end":265,"column_start":9,"column_end":56}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":11723,"byte_end":11726,"line_start":266,"line_end":266,"column_start":9,"column_end":12}},{"value":"/ If no data is available for reading, the method returns","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":11735,"byte_end":11794,"line_start":267,"line_end":267,"column_start":9,"column_end":68}},{"value":"/ `Poll::Pending` and arranges for the current task (via","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":11803,"byte_end":11861,"line_start":268,"line_end":268,"column_start":9,"column_end":67}},{"value":"/ `cx.waker().wake_by_ref()`) to receive a notification when the object becomes","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":11870,"byte_end":11951,"line_start":269,"line_end":269,"column_start":9,"column_end":90}},{"value":"/ readable or is closed.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":11960,"byte_end":11986,"line_start":270,"line_end":270,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":11995,"byte_end":11998,"line_start":271,"line_end":271,"column_start":9,"column_end":12}},{"value":"/ This function is a lower-level call. It needs to be paired with the","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":12007,"byte_end":12078,"line_start":272,"line_end":272,"column_start":9,"column_end":80}},{"value":"/ [`consume`] method to function properly. When calling this","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":12087,"byte_end":12149,"line_start":273,"line_end":273,"column_start":9,"column_end":71}},{"value":"/ method, none of the contents will be \"read\" in the sense that later","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":12158,"byte_end":12229,"line_start":274,"line_end":274,"column_start":9,"column_end":80}},{"value":"/ calling [`poll_read`] may return the same contents. As such, [`consume`] must","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":12238,"byte_end":12319,"line_start":275,"line_end":275,"column_start":9,"column_end":90}},{"value":"/ be called with the number of bytes that are consumed from this buffer to","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":12328,"byte_end":12404,"line_start":276,"line_end":276,"column_start":9,"column_end":85}},{"value":"/ ensure that the bytes are never returned twice.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":12413,"byte_end":12464,"line_start":277,"line_end":277,"column_start":9,"column_end":60}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":12473,"byte_end":12476,"line_start":278,"line_end":278,"column_start":9,"column_end":12}},{"value":"/ [`poll_read`]: AsyncRead::poll_read","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":12485,"byte_end":12524,"line_start":279,"line_end":279,"column_start":9,"column_end":48}},{"value":"/ [`consume`]: AsyncBufRead::consume","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":12533,"byte_end":12571,"line_start":280,"line_end":280,"column_start":9,"column_end":47}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":12580,"byte_end":12583,"line_start":281,"line_end":281,"column_start":9,"column_end":12}},{"value":"/ An empty buffer returned indicates that the stream has reached EOF.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":12592,"byte_end":12663,"line_start":282,"line_end":282,"column_start":9,"column_end":80}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":12672,"byte_end":12675,"line_start":283,"line_end":283,"column_start":9,"column_end":12}},{"value":"/ # Implementation","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":12684,"byte_end":12704,"line_start":284,"line_end":284,"column_start":9,"column_end":29}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":12713,"byte_end":12716,"line_start":285,"line_end":285,"column_start":9,"column_end":12}},{"value":"/ This function may not return errors of kind `WouldBlock` or","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":12725,"byte_end":12788,"line_start":286,"line_end":286,"column_start":9,"column_end":72}},{"value":"/ `Interrupted`.  Implementations must convert `WouldBlock` into","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":12797,"byte_end":12863,"line_start":287,"line_end":287,"column_start":9,"column_end":75}},{"value":"/ `Poll::Pending` and either internally retry or convert","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":12872,"byte_end":12930,"line_start":288,"line_end":288,"column_start":9,"column_end":67}},{"value":"/ `Interrupted` into another error kind.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":12939,"byte_end":12981,"line_start":289,"line_end":289,"column_start":9,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":13981,"byte_end":13988,"line_start":308,"line_end":308,"column_start":12,"column_end":19},"name":"consume","qualname":"::if_std::AsyncBufRead::consume","value":"fn (self: Pin<&mut Self>, amt: usize) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Tells this buffer that `amt` bytes have been consumed from the buffer,\n so they should no longer be returned in calls to [`poll_read`].","sig":null,"attributes":[{"value":"/ Tells this buffer that `amt` bytes have been consumed from the buffer,","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":13096,"byte_end":13170,"line_start":293,"line_end":293,"column_start":9,"column_end":83}},{"value":"/ so they should no longer be returned in calls to [`poll_read`].","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":13179,"byte_end":13246,"line_start":294,"line_end":294,"column_start":9,"column_end":76}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":13255,"byte_end":13258,"line_start":295,"line_end":295,"column_start":9,"column_end":12}},{"value":"/ This function is a lower-level call. It needs to be paired with the","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":13267,"byte_end":13338,"line_start":296,"line_end":296,"column_start":9,"column_end":80}},{"value":"/ [`poll_fill_buf`] method to function properly. This function does","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":13347,"byte_end":13416,"line_start":297,"line_end":297,"column_start":9,"column_end":78}},{"value":"/ not perform any I/O, it simply informs this object that some amount of","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":13425,"byte_end":13499,"line_start":298,"line_end":298,"column_start":9,"column_end":83}},{"value":"/ its buffer, returned from [`poll_fill_buf`], has been consumed and should","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":13508,"byte_end":13585,"line_start":299,"line_end":299,"column_start":9,"column_end":86}},{"value":"/ no longer be returned. As such, this function may do odd things if","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":13594,"byte_end":13664,"line_start":300,"line_end":300,"column_start":9,"column_end":79}},{"value":"/ [`poll_fill_buf`] isn't called before calling it.","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":13673,"byte_end":13726,"line_start":301,"line_end":301,"column_start":9,"column_end":62}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":13735,"byte_end":13738,"line_start":302,"line_end":302,"column_start":9,"column_end":12}},{"value":"/ The `amt` must be `<=` the number of bytes in the buffer returned by","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":13747,"byte_end":13819,"line_start":303,"line_end":303,"column_start":9,"column_end":81}},{"value":"/ [`poll_fill_buf`].","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":13828,"byte_end":13850,"line_start":304,"line_end":304,"column_start":9,"column_end":31}},{"value":"/","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":13859,"byte_end":13862,"line_start":305,"line_end":305,"column_start":9,"column_end":12}},{"value":"/ [`poll_read`]: AsyncRead::poll_read","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":13871,"byte_end":13910,"line_start":306,"line_end":306,"column_start":9,"column_end":48}},{"value":"/ [`poll_fill_buf`]: AsyncBufRead::poll_fill_buf","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":13919,"byte_end":13969,"line_start":307,"line_end":307,"column_start":9,"column_end":59}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":14774,"byte_end":14777,"line_start":332,"line_end":332,"column_start":55,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":14944,"byte_end":14947,"line_start":340,"line_end":340,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":17290,"byte_end":17293,"line_start":412,"line_end":412,"column_start":57,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":17465,"byte_end":17468,"line_start":420,"line_end":420,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":19140,"byte_end":19143,"line_start":470,"line_end":470,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":19532,"byte_end":19535,"line_start":484,"line_end":484,"column_start":55,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":19702,"byte_end":19705,"line_start":492,"line_end":492,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":20447,"byte_end":20450,"line_start":518,"line_end":518,"column_start":61,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":20634,"byte_end":20637,"line_start":526,"line_end":526,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":11492,"byte_end":11501,"line_start":261,"line_end":261,"column_start":29,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":17},"to":{"krate":0,"index":27}},{"span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":14774,"byte_end":14777,"line_start":332,"line_end":332,"column_start":55,"column_end":58},"kind":{"Impl":{"id":0}},"from":{"krate":5,"index":84},"to":{"krate":0,"index":17}},{"span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":14944,"byte_end":14947,"line_start":340,"line_end":340,"column_start":27,"column_end":30},"kind":{"Impl":{"id":1}},"from":{"krate":2,"index":29415},"to":{"krate":0,"index":17}},{"span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":17290,"byte_end":17293,"line_start":412,"line_end":412,"column_start":57,"column_end":60},"kind":{"Impl":{"id":2}},"from":{"krate":5,"index":84},"to":{"krate":0,"index":20}},{"span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":17465,"byte_end":17468,"line_start":420,"line_end":420,"column_start":28,"column_end":31},"kind":{"Impl":{"id":3}},"from":{"krate":2,"index":29415},"to":{"krate":0,"index":20}},{"span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":19140,"byte_end":19143,"line_start":470,"line_end":470,"column_start":25,"column_end":28},"kind":{"Impl":{"id":4}},"from":{"krate":5,"index":4064},"to":{"krate":0,"index":20}},{"span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":19532,"byte_end":19535,"line_start":484,"line_end":484,"column_start":55,"column_end":58},"kind":{"Impl":{"id":5}},"from":{"krate":5,"index":84},"to":{"krate":0,"index":25}},{"span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":19702,"byte_end":19705,"line_start":492,"line_end":492,"column_start":27,"column_end":30},"kind":{"Impl":{"id":6}},"from":{"krate":2,"index":29415},"to":{"krate":0,"index":25}},{"span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":20447,"byte_end":20450,"line_start":518,"line_end":518,"column_start":61,"column_end":64},"kind":{"Impl":{"id":7}},"from":{"krate":5,"index":84},"to":{"krate":0,"index":27}},{"span":{"file_name":"/home/ivan/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.1/src/lib.rs","byte_start":20634,"byte_end":20637,"line_start":526,"line_end":526,"column_start":30,"column_end":33},"kind":{"Impl":{"id":8}},"from":{"krate":2,"index":29415},"to":{"krate":0,"index":27}}]}